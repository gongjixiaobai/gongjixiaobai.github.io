<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker-compose使用</title>
    <link href="/2022/03/07/docker-docker-compose%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/03/07/docker-docker-compose%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h5 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h5><p>首先介绍几个术语。</p><ul><li>服务 (<code>service</code>)：一个应用容器，实际上可以运行多个相同镜像的实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元。</li></ul><p>可见，一个项目可以由多个服务（容器）关联而成，<code>Compose</code> 面向项目进行管理。</p><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><p>最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。</p><p>下面我们用 <code>Python</code> 来建立一个能够记录页面访问次数的 web 网站。</p><h5 id="web-应用"><a href="#web-应用" class="headerlink" title="web 应用"></a>web 应用</h5><p>新建文件夹，在该目录中编写 <code>app.py</code> 文件</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> redis <span class="hljs-keyword">import</span> Redis<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> socket<br> <br>app = Flask(__name__)<br>redis = Redis(host=os.environ.get(<span class="hljs-string">&#x27;REDIS_HOST&#x27;</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>), port=<span class="hljs-number">6379</span>)<br> <br> <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():<br>    redis.incr(<span class="hljs-string">&#x27;hits&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello Container World! I have been seen %s times and my hostname is %s.\n&#x27;</span> % (redis.get(<span class="hljs-string">&#x27;hits&#x27;</span>),socket.gethostname())<br> <br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h5 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h5><p>编写 <code>Dockerfile</code> 文件，内容为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM` `python:3``.6``LABEL` `maintaner=``&quot;weiming02&quot;``COPY` `. /app``WORKDIR` `/app``RUN` `pip install flask redis``EXPOSE` `5000``CMD` `[ ``&quot;python&quot;``, ``&quot;app.py&quot;` `]<br></code></pre></td></tr></table></figure><h5 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h5><p>编写 <code>docker-compose.yml</code> 文件，这个是 Compose 使用的主模板文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">version: &quot;3&quot;<br>services:<br>  redis:<br>    image: redis<br>  web:<br>    build:<br>      context: .<br>      dockerfile: Dockerfile<br>    ports:<br>      - 5000:5000<br>    environment:<br>      REDIS_HOST: redis<br></code></pre></td></tr></table></figure><h5 id="运行-compose-项目"><a href="#运行-compose-项目" class="headerlink" title="运行 compose 项目"></a>运行 compose 项目</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up -d<br></code></pre></td></tr></table></figure><p>此时访问本地 <code>5000</code> 端口，每次刷新页面，计数就会加 1。</p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker-compose简介</title>
    <link href="/2022/03/07/docker-docker-compose/"/>
    <url>/2022/03/07/docker-docker-compose/</url>
    
    <content type="html"><![CDATA[<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。其代码目前在 <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 上开源。</p><p>我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p><code>Compose</code> 中有两个重要的概念：</p><ul><li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li></ul><p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>linux系统命令行安装方式</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">sudo pip3 install docker-compose<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo curl -L https://github.com/docker/compose/releases/download/`curl -Ls -o /dev/null -w %&#123;url_effective&#125; https://github.com/docker/compose/releases/latest | awk -F / &#x27;&#123;print $NF&#125;&#x27;`/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose<br>sudo chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo` `rm` `/usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>docker-compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis面试总结</title>
    <link href="/2022/03/04/mybatis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/04/mybatis%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h6 id="1-和-的区别"><a href="#1-和-的区别" class="headerlink" title="1.#{}和${}的区别"></a>1.#{}和${}的区别</h6><p>#{}是预编译处理，${}是字符串替换。Mybatis在处理#{}时会将sql中的#{}替换为?,PreparedStatement 的set方法来赋值；Mybatis在处理${}时会将sql中的${}替换为变量的值。使用#{}可以有效防止sql注入，提高系统安全性；</p><h6 id="2-Mybatis-Dao接口工作原理？是否可以重载？"><a href="#2-Mybatis-Dao接口工作原理？是否可以重载？" class="headerlink" title="2.Mybatis Dao接口工作原理？是否可以重载？"></a>2.Mybatis Dao接口工作原理？是否可以重载？</h6><p>Dao 接口，就是人们常说的Mapper 接口，接口的全限名，就是映射文件中的namespace的值，接口的方法名，就是映射文件中MappedStatement 的id值，接口方法内的参数，就是传递给sql 的参数。Mapper 接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key 值，可唯一定位一个MappedStatement，举例：com.mybatis3.mappers.StudentDao.findStudentById，可以唯一找到namespace 为com.mybatis3.mappers.StudentDao 下面id &#x3D; findStudentById 的MappedStatement。在Mybatis 中，每一个&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;标签，都会被解析为一个MappedStatement 对象。Dao 接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。Dao 接口的工作原理是JDK 动态代理，Mybatis 运行时会使用JDK 动态代理为Dao接口生成代理proxy 对象， 代理对象proxy 会拦截接口方法， 转而执行MappedStatement 所代表的sql，然后将sql 执行结果返回。</p><h6 id="3-Mybatis分页查询？插件分页原理？"><a href="#3-Mybatis分页查询？插件分页原理？" class="headerlink" title="3.Mybatis分页查询？插件分页原理？"></a>3.Mybatis分页查询？插件分页原理？</h6><p>Mybatis 使用RowBounds 对象进行分页，它是针对ResultSet 结果集执行的内存分页，而非物理分页，可以在sql 内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。分页插件的基本原理是使用Mybatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect 方言，添加对应的物理分页语句和物理分页参数。</p><h6 id="4-Mybatis-是如何将sql-执行结果封装为目标对象并返回的？都有哪些映射形式？"><a href="#4-Mybatis-是如何将sql-执行结果封装为目标对象并返回的？都有哪些映射形式？" class="headerlink" title="4.Mybatis 是如何将sql 执行结果封装为目标对象并返回的？都有哪些映射形式？"></a>4.Mybatis 是如何将sql 执行结果封装为目标对象并返回的？都有哪些映射形式？</h6><p>第一种是使用&lt;resultMap&gt;标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用sql 列的别名功能，将列别名书写为对象属性名，比如T_NAME AS NAME，对象属性名一般是name，小写，但是列名不区分大小写，Mybatis 会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成T_NAME AS NaMe，Mybatis一样可以正常工作。</p><p>有了列名与属性名的映射关系后，Mybatis 通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p><h6 id="5-Xml-映射文件中，除了常见的select-insert-update-delete-标签之外，还有哪些标签？"><a href="#5-Xml-映射文件中，除了常见的select-insert-update-delete-标签之外，还有哪些标签？" class="headerlink" title="5.Xml 映射文件中，除了常见的select|insert|update|delete 标签之外，还有哪些标签？"></a>5.Xml 映射文件中，除了常见的select|insert|update|delete 标签之外，还有哪些标签？</h6><p>还有很多其他的标签， 加上动态sql 的9 个标签，trim|where|set|foreach|if|choose|when|otherwise|bind 等，&lt;sql&gt;其中为sql 片段标签，通过&lt;include&gt;标签引入sql 片段，&lt;selectKey&gt;为不支持自增的主键生成策略标签。</p><h6 id="6-简述Mybatis-的插件运行原理，以及如何编写一个插件"><a href="#6-简述Mybatis-的插件运行原理，以及如何编写一个插件" class="headerlink" title="6.简述Mybatis 的插件运行原理，以及如何编写一个插件"></a>6.简述Mybatis 的插件运行原理，以及如何编写一个插件</h6><p>Mybatis 仅可以编写针对ParameterHandler 、ResultSetHandler 、StatementHandler、Executor 这4 种接口的插件，Mybatis 使用JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4 种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler 的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。实现Mybatis 的Interceptor 接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，还需要在配置文件中配置你编写的插件。</p><h6 id="7-一级、二级缓存"><a href="#7-一级、二级缓存" class="headerlink" title="7.一级、二级缓存"></a>7.一级、二级缓存</h6><ol><li>一级缓存: 基于PerpetualCache 的HashMap 本地缓存， 其存储作用域为Session，当Session flush 或close 之后，该Session 中的所有Cache 就将清空。</li><li>二级缓存与一级缓存其机制相同，默认也是采用PerpetualCache，HashMap 存储， 不同在于其存储作用域为Mapper(Namespace)， 并且可自定义存储源， 如Ehcache。要开启二级缓存，你需要在你的SQL 映射文件中添加一行：&#x2F;<cache/></li><li>对于缓存数据更新机制， 当某一个作用域( 一级缓存Session&#x2F; 二级缓存Namespaces)的进行了C&#x2F;U&#x2F;D 操作后，默认该作用域下所有select 中的缓存将被clear。</li></ol><h6 id="8-Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#8-Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="8.Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？"></a>8.Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？</h6><p>Mybatis 仅支持association 关联对象和collection 关联集合对象的延迟加载，association 指的就是一对一，collection 指的就是一对多查询。在Mybatis 配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled&#x3D;true|false。它的原理是，使用CGLIB 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B 对象的sql，把B 查询上来，然后调<br>用a.setB(b)，于是a 的对象b 属性就有值了，接着完成a.getB().getName()方法的调用。</p><h6 id="9-Mybatis-映射文件中，如果A-标签通过include-引用了B-标签的内容，请问，B-标签能否定义在A-标签的后面，还是说必须定义在A-标签的前面？"><a href="#9-Mybatis-映射文件中，如果A-标签通过include-引用了B-标签的内容，请问，B-标签能否定义在A-标签的后面，还是说必须定义在A-标签的前面？" class="headerlink" title="9.Mybatis 映射文件中，如果A 标签通过include 引用了B 标签的内容，请问，B 标签能否定义在A 标签的后面，还是说必须定义在A 标签的前面？"></a>9.Mybatis 映射文件中，如果A 标签通过include 引用了B 标签的内容，请问，B 标签能否定义在A 标签的后面，还是说必须定义在A 标签的前面？</h6><p>虽然Mybatis 解析Xml 映射文件是按照顺序解析的，但是，被引用的B 标签依然可以定义在任何地方，Mybatis 都可以正确识别。原理是，Mybatis 解析A 标签，发现A 标签引用了B 标签，但是B 标签尚未解析到，尚不存在，此时，Mybatis 会将A 标签标记为未解析状态，然后继续解析余下的标签，包含B 标签，待所有标签解析完毕，Mybatis 会重新解析那些被标记为未解析的标签，此时再解析A 标签时，B 标签已经存在，A 标签也就可以正常解析完成了。</p><h6 id="10-简述Mybatis-的Xml-映射文件和Mybatis-内部数据结构之间的映射关系？"><a href="#10-简述Mybatis-的Xml-映射文件和Mybatis-内部数据结构之间的映射关系？" class="headerlink" title="10.简述Mybatis 的Xml 映射文件和Mybatis 内部数据结构之间的映射关系？"></a>10.简述Mybatis 的Xml 映射文件和Mybatis 内部数据结构之间的映射关系？</h6><p>Mybatis 将所有Xml 配置信息都封装到All-In-One 重量级对象Configuration 内部。在Xml 映射文件中，&lt;parameterMap&gt;标签会被解析为ParameterMap 对象，其每个子元素会被解析为ParameterMapping 对象。&lt;resultMap&gt;标签会被解析为ResultMap 对象，其每个子元素会被解析为ResultMapping 对象。每一&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;标签均会被解析为MappedStatement 对象，标签内的sql 会被解析为BoundSql 对象。</p>]]></content>
    
    
    
    <tags>
      
      <tag>框架</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>延时消息</title>
    <link href="/2022/03/01/%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/"/>
    <url>/2022/03/01/%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<p>延时消息（定时消息）是指在异步场景下，生产者发送的消息不希望被消费者马上消费，而是在延时或在指定时间消费。延时消费场景应用比较广泛，如计算电商订单是否支付、活动时间内任务是否完成。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="基于外部存储实现的方案"><a href="#基于外部存储实现的方案" class="headerlink" title="基于外部存储实现的方案"></a>基于外部存储实现的方案</h3><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">外部存储指的是在MQ本身自带的存储以外又引入的其他存储系统。</span><br></code></pre></td></tr></table></figure><p>基于外部存储的方案实际都是一样的套路，将MQ和延时模块区分开来，延时消息模块是一个独立的服务&#x2F;进程。消息先保存在其他存储介质，等消息到期在投递到MQ。当消息进入延时模块已经到期，则直接投递。</p><img src="/2022/03/01/%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0.png" class=""><h4 id="基于数据库（如MySQL）"><a href="#基于数据库（如MySQL）" class="headerlink" title="基于数据库（如MySQL）"></a>基于数据库（如MySQL）</h4><p>基于关系型数据库（如MySQL）延时消息表的方式来实现。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `delay_msg` (<br>  `id` <span class="hljs-type">bigint</span> unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `delivery_time` DATETIME <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;投递时间&#x27;</span>,<br>  `payloads` <span class="hljs-type">blob</span> COMMENT <span class="hljs-string">&#x27;消息内容&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `time_index` (`delivery_time`)<br>)<br></code></pre></td></tr></table></figure><p>通过定时线程定时扫描到期的消息，然后进行投递。定时线程的扫描间隔理论上就是你延时消息的最小时间精度。</p><p>优点：</p><ul><li>实现简单；</li></ul><p>缺点：</p><ul><li>B+Tree索引不适合消息场景的大量写入；</li></ul><h4 id="基于Redis"><a href="#基于Redis" class="headerlink" title="基于Redis"></a>基于Redis</h4><img src="/2022/03/01/%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/Redis%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF%E5%AE%9E%E7%8E%B0.png" class=""><ul><li>Messages Pool 所有的延时消息存放，结构为KV结构，key为消息ID，value为一个具体的message（这里选择Redis Hash结构主要是因为hash结构能存储较大的数据量，数据较多时候会进行渐进式rehash扩容，并且对于HSET和HGET命令来说时间复杂度都是O(1)）</li><li>Delayed Queue是16个有序队列（队列支持水平扩展），结构为ZSET，value 为 messages pool中消息ID，score为过期时间（<strong>分为多个队列是为了提高扫描的速度）</strong></li><li>Worker 代表处理线程，通过定时任务扫描 Delayed Queue 中到期的消息</li></ul><p>这个方案选用 Redis 存储在我看来有几点考虑。</p><ul><li>Redis ZSET 很适合实现延时队列</li><li>性能问题，虽然 ZSET 插入是一个 O(logn) 的操作，但是Redis 基于内存操作，并且内部做了很多性能方面的优化。</li></ul><p>但是这个方案其实也有需要斟酌的地方，上述方案通过创建多个 Delayed Queue 来满足对于并发性能的要求，但这也带来了多个 Delayed Queue 如何在多个节点情况下均匀分配，并且很可能出现到期消息并发重复处理的情况，是否要引入分布式锁之类的并发控制设计？</p><p>在量不大的场景下，上述方案的架构其实可以蜕化成主从架构，只允许主节点来处理任务，从节点只做容灾备份。实现难度更低更可控。</p><h4 id="定时线程检查的缺陷与改进"><a href="#定时线程检查的缺陷与改进" class="headerlink" title="定时线程检查的缺陷与改进"></a>定时线程检查的缺陷与改进</h4><p>上述几个方案中，都通过线程定时扫描的方案来获取到期的消息。</p><p>定时线程的方案在消息量较少的时候，会浪费资源，在消息量非常多的时候，又会出现因为扫描间隔设置不合理导致延时时间不准确的问题。可以借助 JDK Timer 类中的思想，通过 wait-notify 来节省 CPU 资源。</p><p>获取中最近的延时消息，然后wait(执行时间-当前时间)，这样就不需要浪费资源到达时间时会自动响应，如果有新的消息进入，并且比我们等待的消息还要小，那么直接notify唤醒，重新获取这个更小的消息，然后又wait，如此循环。</p><h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p>RocketMQ 开源版本支持延时消息，但是只支持 18 个 Level 的延时，并不支持任意时间。只不过这个 Level 在 RocketMQ 中可以自定义的，所幸来说对普通业务算是够用的。默认值为“1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h”，18个level。</p><p>通俗的讲，设定了延时 Level 的消息会被暂存在名为 <code>SCHEDULE_TOPIC_XXXX</code>的topic中，并根据 level 存入特定的queue，queueId &#x3D; delayTimeLevel – 1，<font color='red'><strong>即一个queue只存相同延时的消息，保证具有相同发送延时的消息能够顺序消费。</strong></font>broker会调度地消费SCHEDULE_TOPIC_XXXX，将消息写入真实的topic。</p><p>优点：</p><ul><li>Level 数固定，每个 Level 有自己的定时器，开销不大</li><li>将 Level 相同的消息放入到同一个 Queue 中，保证了同一 Level 消息的顺序性；不同 Level 放到不同的 Queue 中，保证了投递的时间准确性；</li><li>通过只支持固定的Level，将不同延时消息的排序变成了固定Level Topic 的追加写操作</li></ul><p>缺点：</p><ul><li>Level 配置的修改代价太大，固定 Level 不灵活</li><li>CommitLog 会因为延时消息的存在变得很大</li></ul><h3 id="QMQ"><a href="#QMQ" class="headerlink" title="QMQ"></a>QMQ</h3><p>QMQ提供任意时间的延时&#x2F;定时消息，你可以指定消息在未来两年内(可配置)任意时间内投递。</p><p> QMQ 是目前开源 MQ 中延时消息设计最合理的。里面设计的核心简单来说就是 <strong>多级时间轮 + 延时加载 + 延时消息单独磁盘存储</strong>。</p><p>QMQ的延时&#x2F;定时消息使用的是两层 hash wheel 来实现的。</p><p>第一层位于磁盘上，每个小时为一个刻度(默认为一个小时一个刻度，可以根据实际情况在配置里进行调整)，每个刻度会生成一个日志文件(schedule log)，因为QMQ支持两年内的延时消息(默认支持两年内，可以进行配置修改)，则最多会生成 2 * 366 * 24 &#x3D; 17568 个文件(如果需要支持的最大延时时间更短，则生成的文件更少)。</p><p>第二层在内存中，当消息的投递时间即将到来的时候，会将这个小时的消息索引(索引包括消息在schedule log中的offset和size)从磁盘文件加载到内存中的hash wheel上，内存中的hash wheel则是以500ms为一个刻度。</p><img src="/2022/03/01/%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF/640.jfif" class=""><p>总结一下设计上的亮点：</p><ul><li>时间轮算法适合延时&#x2F;定时消息的场景，省去延时消息的排序，插入删除操作都是 O(1) 的时间复杂度；</li><li>通过多级时间轮设计，支持了超大时间跨度的延时消息；</li><li>通过延时加载，内存中只会有最近要消费的消息，更久的延时消息会被存储在磁盘中，对内存友好；</li><li>延时消息单独存储（schedule log），不会影响到正常消息的空间回收；</li></ul><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><ul><li><p>死信队列。实际就是利用一个没有消费者的Queue1，等待消息过期后，通过交换机转发到Queue2来进行消费，消息的延迟时间就是消息在Queue1中的存活时间。局限性：延迟消息的延迟时间是依赖于Queue1的x-message-ttl的，也就是说，需要支持多少种延迟的时间，就得提前设置好多少个无消费类的Queue，而且由于转发绑定的Queue2需要配到交换机中，比较死板，而真实的业务中消费类肯定是不一样的。</p></li><li><p>插件实现。在rabbitmq 3.5.7及以上的版本提供了一个插件（rabbitmq-delayed-message-exchange）来实现延迟队列功能。在需要发送延迟消息队列的项目中，声明一个x-delayed-message类型的交换机来使用delayed-messaging特性，注意这个交换机并不是rabbitmq本身的，而是插件提供的，一定要是x-delayed-message类型，绑定的queue就是正常的queue即可，不需要额外多余的queue(这是和不用插件方式的最大区别及好处)</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
